name: 'Update Version Catalog'
description: 'Updates version.json with all releases from GitHub API with conflict resolution'
inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  binary-names:
    description: 'JSON object mapping platform names to binary filenames'
    required: false
    default: |
      {
        "linux": "calc-linux-amd64",
        "windows": "calc-windows-amd64.exe", 
        "darwin": "calc-darwin-amd64",
        "darwin-arm64": "calc-darwin-arm64"
      }
  max-releases:
    description: 'Maximum number of releases to keep in version.json'
    required: false
    default: '50'
  max-attempts:
    description: 'Maximum number of push attempts for conflict resolution'
    required: false
    default: '10'
  wait-timeout:
    description: 'Maximum time to wait for release availability (seconds)'
    required: false
    default: '180'
  target-branch:
    description: 'Target branch to push version.json updates'
    required: false
    default: 'main'

runs:
  using: 'composite'
  steps:
    - name: Configure git identity
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Wait for release to be fully available
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Waiting for release $VERSION to be available via API..."

        # Calculate number of attempts based on timeout
        WAIT_INTERVAL=5
        MAX_ATTEMPTS=$((${{ inputs.wait-timeout }} / WAIT_INTERVAL))
        
        for i in $(seq 1 $MAX_ATTEMPTS); do
          if gh api repos/${{ github.repository }}/releases/tags/$VERSION > /dev/null 2>&1; then
            echo "Release $VERSION is now available via API"
            break
          else
            echo "Attempt $i/$MAX_ATTEMPTS: Release not yet available, waiting ${WAIT_INTERVAL} seconds..."
            sleep $WAIT_INTERVAL
          fi
          
          if [ $i -eq $MAX_ATTEMPTS ]; then
            echo "::warning::Release not available after ${{ inputs.wait-timeout }} seconds, proceeding anyway"
          fi
        done
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Rebuild complete version.json with conflict resolution
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        BINARY_NAMES: ${{ inputs.binary-names }}
        MAX_RELEASES: ${{ inputs.max-releases }}
        MAX_ATTEMPTS: ${{ inputs.max-attempts }}
        TARGET_BRANCH: ${{ inputs.target-branch }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Rebuilding version.json from ALL releases (triggered by $VERSION)"

        # Create Python script to rebuild version.json from GitHub API
        cat > rebuild_version.py << 'EOF'
        import json
        import subprocess
        import sys
        import os
        from datetime import datetime

        def run_gh_command(cmd):
            """Run gh CLI command and return JSON output"""
            try:
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True)
                return json.loads(result.stdout)
            except subprocess.CalledProcessError as e:
                print(f"Error running command: {cmd}")
                print(f"Error: {e.stderr}")
                sys.exit(1)

        def version_sort_key(release):
            """Create sort key for version ordering (newest first)"""
            tag = release['tag_name']
            created = release['created_at']

            # Parse version components
            version_part = tag.replace('v', '').split('-')[0]
            try:
                major, minor, patch = map(int, version_part.split('.'))
                version_num = major * 10000 + minor * 100 + patch
            except:
                version_num = 0

            # Priority: stable > beta > alpha
            if '-alpha' in tag:
                priority = 1
            elif '-beta' in tag:
                priority = 2
            else:
                priority = 3

            # Use creation time as tiebreaker
            return (priority, version_num, created)

        # Get configuration from environment
        repo = os.environ['GITHUB_REPOSITORY']
        binary_names = json.loads(os.environ['BINARY_NAMES'])
        max_releases = int(os.environ['MAX_RELEASES'])

        # Fetch all releases using GitHub CLI
        print("Fetching all releases from GitHub API...")
        releases = run_gh_command(f'gh api repos/{repo}/releases --paginate')

        if not releases:
            print("No releases found!")
            sys.exit(1)

        print(f"Found {len(releases)} releases")

        # Sort releases (newest/highest priority first)
        releases.sort(key=version_sort_key, reverse=True)

        # Build version.json structure
        version_data = {
            "releases": []
        }

        for release in releases:
            tag = release['tag_name']

            # Skip draft releases
            if release.get('draft', False):
                continue

            # Determine release type
            is_alpha = '-alpha' in tag.lower()
            is_beta = '-beta' in tag.lower()

            # Build URLs based on binary names configuration
            urls = {}
            for platform, binary_name in binary_names.items():
                urls[platform] = f"https://github.com/{repo}/releases/download/{tag}/{binary_name}"

            release_entry = {
                "version": tag,
                "urls": urls,
                "isAlpha": is_alpha,
                "isBeta": is_beta,
                "releaseDate": release['created_at']
            }

            version_data["releases"].append(release_entry)

            release_type = "ALPHA" if is_alpha else ("BETA" if is_beta else "STABLE")
            print(f"Added {tag} ({release_type})")

        # Keep only the specified number of releases
        version_data["releases"] = version_data["releases"][:max_releases]

        # Write version.json
        with open('version.json', 'w') as f:
            json.dump(version_data, f, indent=2)

        print(f"\nRebuilt version.json with {len(version_data['releases'])} releases")
        if version_data["releases"]:
            print(f"Latest release: {version_data['releases'][0]['version']}")
        EOF

        # Enhanced conflict resolution loop
        ATTEMPT=1

        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "=== Attempt $ATTEMPT/$MAX_ATTEMPTS ==="

          # Always start fresh - fetch latest target branch
          echo "Fetching latest $TARGET_BRANCH branch..."
          git fetch origin $TARGET_BRANCH
          git reset --hard origin/$TARGET_BRANCH

          # Run the rebuild script on latest code
          echo "Rebuilding version.json..."
          python3 rebuild_version.py

          # Check if version.json actually changed
          if git diff --quiet version.json; then
            echo "No changes to version.json - skipping commit"
            exit 0
          fi

          echo "Changes detected in version.json"
          git add version.json
          git commit -m "Rebuild version.json with all releases (triggered by ${GITHUB_REF#refs/tags/}) [attempt $ATTEMPT]"

          # Try to push
          echo "Attempting to push changes..."
          if git push origin HEAD:$TARGET_BRANCH; then
            echo "‚úÖ Successfully pushed version.json update on attempt $ATTEMPT"
            exit 0
          else
            echo "‚ùå Push failed on attempt $ATTEMPT"

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "üö® All $MAX_ATTEMPTS attempts failed. Manual intervention required."
              exit 1
            fi

            # Wait before retrying (exponential backoff)
            WAIT_TIME=$((ATTEMPT * 3))
            echo "Waiting ${WAIT_TIME} seconds before retry..."
            sleep $WAIT_TIME

            ATTEMPT=$((ATTEMPT + 1))
          fi
        done